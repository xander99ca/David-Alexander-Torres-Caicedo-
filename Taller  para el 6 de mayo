#include <iostream>

Using namespace std;



Struct peli {

    String nombre;

    Int ano_reali;

    String genero;

    Float dinero_recau;

    Peli *izq, *der;

};



Peli *raiz = NULL, *aux = NULL, *aux2 = NULL;

Void posicionar() {

    If (aux->nombre < aux2->nombre) {

        If (aux2->izq ¡= NULL) {

            Aux2 = aux2->izq;

            Posicionar();

        } else {

            Aux2->izq = aux;

        }

    } else {

        If (aux2->der ¡= NULL) {

            Aux2 = aux2->der;

            Posicionar();

        } else {

            Aux2->der = aux;

        }

    }

}



// Agrega un nuevo nodo de película al árbol

Void AGREGAR() {

    Aux = nueva peli;

    Aux->izq = aux->der = NULL;



    Cout << “--- AGREGAR PELICULA ---“ << endl;

    Cout << “Nombre: “;

    Cin.ignore();

    Getline(cin, aux->nombre);



    Cout << “Año de realización: “;

    Cin >> aux->ano_reali;

    Cin.ignore();



    Cout << “Género: “;

    Getline(cin, aux->genero);



    Cout << “Dinero recaudado: “;

    Cin >> aux->dinero_recau;



    If (raiz == NULL) {

        Raiz = aux;

    } else {

        Aux2 = raiz;

        Posicionar();

    }



    Cout << “Película agregada correctamente.\n\n”;

}

Int preorden(peli *n) {

    If (n == NULL) return 0;

    Cout << “Nombre: “ << n->nombre << “\n”

         << “Año: “ << n->ano_reali << “\n”

         << “Género: “ << n->genero << “\n”

         << “Recaudación: “ << n->dinero_recau << “\n”

         

    Preorden(n->izq);

    Preorden(n->der);

    Return 0;

}



Int inorden(peli *n) {

    If (n == NULL) return 0;

    Inorden(n->izq);

    Cout << “Nombre: “ << n->nombre << “\n”

         << “Año: “ << n->ano_reali << “\n”

         << “Género: “ << n->genero << “\n”

         << “Recaudación: “ << n->dinero_recau << “\n”

         

    Inorden(n->der);

    Return 0;

}



Int postorden(peli *n) {

    If (n == NULL) return 0;

    Postorden(n->izq);

    Postorden(n->der);

    Cout << “Nombre: “ << n->nombre << “\n”

         << “Año: “ << n->ano_reali << “\n”

         << “Género: “ << n->genero << “\n”

         << “Recaudación: “ << n->dinero_recau << “\n”

         

    Return 0;

}



Void MostrarRecorridos() {

    Int opc;

    Do {

        Cout << “=== Mostrar películas ===\n”

             << “1) Preorden\n”

             << “2) Inorden\n”

             << “3) Postorden\n”

             << “4) Volver al menú principal\n”

             << “Elige una opción: “;

        Cin >> opc;

        Cout << endl;

        Switch (opc) {

            Case 1:

                Preorden(raiz);

                Break;

            Case 2:

                Inorden(raiz);

                Break;

            Case 3:

                Postorden(raiz);

                Break;

        }

        Cout << endl;

    } while (opc ¡= 4);

}

Void BUSCAR() {

    If (raiz == NULL) {

        Cout << “No hay películas registradas.\n\n”;

        Return;

    }

    String Bus;

    Cout << “Ingrese el nombre de la película a buscar: “;

    Cin.ignore();

    Getline(cin, bus);

    Peli  *b = raiz;

    While (b¡= NULL) {

        If (clave == b->nombre) {

            Cout << “Encontrada: “ << b->nombre << “ (“ << b->ano_reali << “), “

                 << b->genero << “, $” << b->dinero_recau << “\n\n”;

            Return;

        }

        If (clave < b->nombre)

            b = b->izq;

        Else

            b = b->der;

    }

    Cout << “Película no encontrada.\n\n”;

}







Int main() {

    Int opc;

    Do {

        Cout << “=== PELIPLUS ===\n”

             << “1) Agregar película\n”

             << “2) Buscar película por nombre\n”

             << “3) Buscar películas por género\n”

             << “4) Mostrar todas las películas\n”

             << “5) Ver los 3 fracasos taquilleros\n”

             << “6) Salir\n”

             << “Elige una opción: “;

        Cin >> opc;

        Cout << endl;

        Switch (opc) {

            Case 1: AGREGAR(); break;

            Case 2: BUSCAR(); break;

            Case 3: BuGenero(); break;

            Case 4: MostrarRecorridos(); break;

            Case 5: TresFracasos(); break;

        }

    } while (opc ¡= 6);

    Return 0;

}

